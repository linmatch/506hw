---
title: "506hw1"
author: "Manqing Lin"
format: 
  html:
    code-fold: true
editor: visual
---

## Problem1

##a&b

```{r}
library(readr)
wine <- read_csv("~/Downloads/wine/wine.data")
View(wine)
show_col_types = FALSE
```

```{r}
library(readr)
winee <- read_csv("~/Downloads/wine/winee.names")
View(winee)
```

##c

c(1)

```{r}
newwine<-rbind(c(1,14.23,1.71,2.43,15.6,127,2.8,3.06,0.28,2.29,5.64,1.04,3.92,1065),wine)

View(newwine)

colnames(newwine)<-c("class","alcohol","malic acid","ash","alcalinity of ash", "magnesium","total phenols", "flavanoids", "nonflavanoid phenols","proanthocyanins","color intensity","hue","od280/od350","proline")
```

```{r}
##get the alcohol content data for each class of wine
c1al<-newwine$alcohol[newwine$class==1]
c2al<-newwine$alcohol[newwine$class==2]
c3al<-newwine$alcohol[newwine$class==3]

##calculate the maximum of alchol content for each class of wine
max(c1al)
max(c2al)
max(c3al)
```

The wine with the highest alcohol content belongs to class1.

c(2)

```{r}
##calculate the minimum of alchol content for each class of wine
min(c1al)
min(c2al)
min(c3al)
```

The wine with the lowest alcohol content belongs to class2.

c(3)

```{r}
##get all magnesium data
mag<-c(newwine$magnesium)
count<-0

##count the number of wine that have magnesium greater than 114
for (i in 1:178){
  if (mag[i]>114){
  count=count+1
  }
}
count

```

There are 26 kinds of wine have higher levels of magnesium.

c(4)

```{r}
##get magnesium data for each class of wine
c1mag<-newwine$magnesium[newwine$class==1]
c2mag<-newwine$magnesium[newwine$class==2]
c3mag<-newwine$magnesium[newwine$class==3]

##count the number of class 1 wine that have magnesium greater than 114
count1<-0
for (i in 1:length(c1mag)){
  if (c1mag[i]>114){
  count1=count1+1
  }
}
count1

##count the number of class 2 wine that have magnesium greater than 114
count2<-0
for (i in 1:length(c2mag)){
  if (c2mag[i]>114){
  count2=count2+1
  }
}
count2

##count the number of class 3 wine that have magnesium greater than 114
count3<-0
for (i in 1:length(c3mag)){
  if (c3mag[i]>114){
  count3=count3+1
  }
}
count3


```

For class 1 wines, there are 15 of them have higher levels of magnesium.

For class 2 wines, there are 6 of them have higher levels of magnesium.

For class 3 wines, there are 5 of them have higher levels of magnesium.

##d

```{r}
##calculate average value of each variable
df<-subset(newwine,select="class")
varlist<-colMeans(df)

##create a table for average value of each variable
data=matrix(varlist,ncol=13,nrow = 1)
colnames(data)<-c("alcohol","MalicAcid","ash","AlofAsh", "mag","TTphenols", "flava", "NonflaPhe","proanth","ColorInten","hue","OD","proline")
rownames(data)<-c("mean")
final=as.table(data)
final
```

```{r}
##calculate average value of each variable for each class wines
library(dplyr)
newwine%>%group_by(class)%>%summarise_at(vars("alcohol","malic acid","ash","alcalinity of ash", "magnesium","total phenols", "flavanoids", "nonflavanoid phenols","proanthocyanins","color intensity","hue","od280/od350","proline"),mean)

```

##e

```{r}
##perform t test for level of ash between class1 and class2
t.test(newwine$ash[newwine$class==1],newwine$ash[newwine$class==2])
```

Since the p value is smaller than 0.05, we reject the null hypothesis and conclude that there is a different in the level of ash between class 1 wine and class 2 wine at $\alpha=0.05$.

```{r}
##perform t test for level of ash between class1 and class3
t.test(newwine$ash[newwine$class==1],newwine$ash[newwine$class==3])
```

Since the p value is greater than 0.05, we fail to reject the null hypothesis and conclude that there is not different in the level of ash between class 1 wine and class 3 wine at $\alpha=0.05$.

```{r}
##perform t test for level of ash between class2 and class3
t.test(newwine$ash[newwine$class==2],newwine$ash[newwine$class==3])
```

Since the p value is smaller than 0.05, we reject the null hypothesis and conclude that there is a different in the level of ash between class 2 wine and class 3 wine at $\alpha=0.05$.

## Problem2

##a

```{r}
isPerfectPower<-function(n,p){
  r<-n^(1/p)
  if(r%%1==0){
    mylist<-list("isPerfect"=TRUE)
    return(mylist)
  }
  else{
    return(list("isPerfect"=FALSE))
  }
}
```

##b

```{r}
findRootPower<-function(n){
  for(r in 2:sqrt(n)){
    p=log(n, base=r)
    if(isPerfectPower(n,p)==TRUE){
      return(n=r^p)
    }
    return("Not a Perfect Power")
  }

}

findRootPower(27)
n
p
r
```

## Problem3

##a&b&c

```{r}
# Function to determine the name of a poker hand
get_poker_hand_name <- function(suits, ranks) {
  # Check for a flush (all suits the same)
  if (length(unique(suits)) == 1) {
    # Check for a straight flush(five cards are in sequence)
    if (max(as.numeric(ranks)) - min(as.numeric(ranks)) == 4) {
      return("Straight Flush")
    } else {
      return("Flush")
    }
  }
  
  # Check for four of a kind(if there exist four cards in the same rank)
  if (any(table(ranks) == 4)) {
    return("Four of a Kind")
  }
  
  # Check for a full house(if there exist three cards in the same rank with two cards in a pair)
  if (any(table(ranks) == 3) && any(table(ranks) == 2)) {
    return("Full House")
  }
  
  # Check for a straight(if the five cards in a sequence but not having same suit)
  if (max(as.numeric(ranks)) - min(as.numeric(ranks)) == 4) {
    return("Straight")
  }
  
  # Check for three of a kind(if threre exist three cards are in the same rank)
  if (any(table(ranks) == 3)) {
    return("Three of a Kind")
  }
  
  # Check for two pair(if there exist two pair of cards in the same rank)
  if (sum(table(ranks) == 2) == 4) {
    return("Two Pair")
  }
  
  # Check for one pair(if there exist two cards in the same rank)
  if (any(table(ranks) == 2)) {
    return("One Pair")
  }
  
  # If none of the above, it's a high card hand
  return("High Card")
}

# Function to simulate dealing a round of 5-card stud poker
deal_poker_round <- function(num_players) {
  # Define the deck of cards
  # import suits vector
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades")
  # import ranks vector
  ranks <- c("2","3","4","5","6","7","8","9","10", "Jack", "Queen", "King", "Ace")
  
  # Create a deck of cards
  deck <- expand.grid(Rank = ranks, Suit = suits)
  
  # Shuffle the deck
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to each player
  hands <- vector("list", num_players)
  # run the loop if i is between 1 and the number input
  for (i in 1:num_players) {
    # define ith hand of card
    hands[[i]] <- deck[((i - 1) * 5 + 1):(i * 5), ]
    # combine results to show player infomation
    cat("Player", i, "Hand:\n")
    print(hands[[i]])
    # combine output to show the result hand infomation
    cat("Hand Name:", get_poker_hand_name(hands[[i]]$Suit, hands[[i]]$Rank), "\n\n")
  }
}

# Example usage:
# To simulate a round of poker with 3 players:
#deal_poker_round(3)
#deal_poker_round(4)
#deal_poker_round(10)
#deal_poker_round(11)
```

The first error is the vector type of the ranks which report "all arguments must have the same length". It initially includes different type of vector, so I now change the vectors into same type.

The second error is reporting "error in summary.factor, 'max' not meaning for for factors". This is because the type the vector should be numeric in the max function, so I add "as.numeric" before the rank vector.

By simulating the process with different input, I think the code produce the accurate results when the number of players is no more than 10. When asking for more than 10 players to be dealt, there will be an error starting at the 11th hand.
